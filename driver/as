#!/usr/bin/env python
#
# This is the assembler phase.  This variant is only invoked during
# the second compilation where we are building bitcode.  The compiler
# has already been instructed to generate LLVM IR; the compiler then
# tries to assemble it into an object file.  The standard assembler
# doesn't understand LLVM bitcode, so we interpose and use the llvm-as
# command to build a bitcode file.  We leave the bitcode in place, but
# record its full absolute path in the corresponding object file
# (which was created in the first compilation phase by the real
# compiler).  We'll link this together at a later stage.

import os
import sys
from utils import *
from subprocess import *
from popenwrapper import Popen


class BCFilter(ArgumentListFilter):
    def __init__(self, arglist):
        self.bcName = None
        localCallbacks = { '-o' : (1, BCFilter.outFileCallback) }
        super(BCFilter, self).__init__(arglist, exactMatches=localCallbacks)

    def outFileCallback(self, flag, name):
        self.outFileName = name

argFilter = BCFilter(sys.argv[1:])
# Since this is just the assembler, there should only ever be one file
try:
    [infile] = argFilter.inputFiles
except ValueError:
    infile = "-"

# Now compile this llvm assembly file into a bitcode file.  The output
# filename is the same as the object with a .bc appended
(dirs, filename) = os.path.split(argFilter.outFileName)
bcfilename = '.{0}.bc'.format(filename)
bcPath = os.path.join(dirs, bcfilename)
fakeAssembler = ['llvm-as', infile, '-o', bcPath]
asmProc = subprocess.Popen(fakeAssembler)
realRet = asmProc.wait()

if realRet != 0:
    sys.exit(realRet)

attachBitcodePathToObject(bcPath, argFilter.outFileName)

sys.exit(realRet)




